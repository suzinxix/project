Index: app/src/main/res/layout/fragment_weekly.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:orientation=\"vertical\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:layout_gravity=\"center_vertical\">\r\n\r\n    <TextView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:textSize=\"30sp\"\r\n        android:text=\"주차별 계획\"\r\n        android:gravity=\"center\" />\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <TextView\r\n            android:id=\"@+id/textViewWeek\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"TextView\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/textViewTodo\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            android:text=\"TextView\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/imageButtonCamera\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            tools:srcCompat=\"@tools:sample/avatars\" />\r\n\r\n        <ImageButton\r\n            android:id=\"@+id/imageButtonTimer\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_weight=\"1\"\r\n            tools:srcCompat=\"@tools:sample/avatars\" />\r\n    </LinearLayout>\r\n\r\n    <ImageView\r\n        android:id=\"@+id/imageViewTempGallery\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_weight=\"1\"\r\n        tools:srcCompat=\"@tools:sample/avatars\" />\r\n\r\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_weekly.xml	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ app/src/main/res/layout/fragment_weekly.xml	(date 1621428056064)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:orientation="vertical"
     android:layout_width="match_parent"
@@ -13,45 +14,10 @@
         android:text="주차별 계획"
         android:gravity="center" />
 
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:orientation="horizontal">
-
-        <TextView
-            android:id="@+id/textViewWeek"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="TextView" />
-
-        <TextView
-            android:id="@+id/textViewTodo"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            android:text="TextView" />
-
-        <ImageButton
-            android:id="@+id/imageButtonCamera"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            tools:srcCompat="@tools:sample/avatars" />
-
-        <ImageButton
-            android:id="@+id/imageButtonTimer"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_weight="1"
-            tools:srcCompat="@tools:sample/avatars" />
-    </LinearLayout>
-
-    <ImageView
-        android:id="@+id/imageViewTempGallery"
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/recyclerviewWeekly"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:layout_weight="1"
-        tools:srcCompat="@tools:sample/avatars" />
+        android:layout_height="match_parent" >
+    </androidx.recyclerview.widget.RecyclerView>
 
-</RelativeLayout>
\ No newline at end of file
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_gallery.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout\r\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:orientation=\"vertical\"\r\n    android:layout_gravity=\"center_vertical\">\r\n\r\n    <TableLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\">\r\n\r\n        <TableRow\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" >\r\n\r\n            <ImageView\r\n                android:id=\"@+id/imageViewGallery1\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_weight=\"1\"\r\n                tools:srcCompat=\"@tools:sample/avatars\" />\r\n\r\n            <ImageView\r\n                android:id=\"@+id/imageViewGallery2\"\r\n                android:layout_width=\"wrap_content\"\r\n                android:layout_height=\"wrap_content\" />\r\n        </TableRow>\r\n\r\n        <TableRow\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" />\r\n\r\n        <TableRow\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" />\r\n\r\n        <TableRow\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" />\r\n    </TableLayout>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_gallery.xml	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ app/src/main/res/layout/fragment_gallery.xml	(date 1621505951451)
@@ -7,38 +7,10 @@
     android:orientation="vertical"
     android:layout_gravity="center_vertical">
 
-    <TableLayout
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/recyclerviewGallery"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content">
-
-        <TableRow
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" >
-
-            <ImageView
-                android:id="@+id/imageViewGallery1"
-                android:layout_width="match_parent"
-                android:layout_height="wrap_content"
-                android:layout_weight="1"
-                tools:srcCompat="@tools:sample/avatars" />
-
-            <ImageView
-                android:id="@+id/imageViewGallery2"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content" />
-        </TableRow>
-
-        <TableRow
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" />
-
-        <TableRow
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" />
-
-        <TableRow
-            android:layout_width="match_parent"
-            android:layout_height="match_parent" />
-    </TableLayout>
+        android:layout_height="match_parent" >
+    </androidx.recyclerview.widget.RecyclerView>
 
 </LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/example/studyproject/BoardFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.studyproject;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.google.android.material.tabs.TabLayout;\r\n\r\n\r\npublic class BoardFragment extends Fragment {\r\n    TabLayout tabs;\r\n    Toolbar toolbar_board;\r\n    WeeklyFragmentTmp fragment_weekly;\r\n    GalleryFragment fragment_gallery;\r\n\r\n    //Fragment 변경위해\r\n    public static BoardFragment newInstance() {\r\n        return new BoardFragment();\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n\r\n        View view = inflater.inflate(R.layout.fragment_board, container, false);\r\n\r\n        // 툴바 추가\r\n        toolbar_board = (Toolbar) view.findViewById(R.id.toolbarBoard);\r\n        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar_board);\r\n\r\n        fragment_weekly = new WeeklyFragmentTmp();\r\n        fragment_gallery = new GalleryFragment();\r\n\r\n        getActivity().getSupportFragmentManager().beginTransaction().add(R.id.containerTabs, fragment_weekly).commit();\r\n\r\n        tabs = view.findViewById(R.id.tabs);\r\n        tabs.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {\r\n            @Override\r\n            public void onTabSelected(TabLayout.Tab tab) {\r\n                int position = tab.getPosition();\r\n                Fragment selected = null;\r\n                if(position == 0)\r\n                    selected = fragment_weekly;\r\n                else if(position == 1)\r\n                    selected = fragment_gallery;\r\n                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.containerTabs, selected).commit(); //오류-클릭,replace ok. 탭바가 사라짐\r\n            }\r\n\r\n            @Override\r\n            public void onTabUnselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onTabReselected(TabLayout.Tab tab) {\r\n\r\n            }\r\n        });\r\n\r\n        return view;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/studyproject/BoardFragment.java	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ app/src/main/java/com/example/studyproject/BoardFragment.java	(date 1621589708386)
@@ -15,7 +15,7 @@
 public class BoardFragment extends Fragment {
     TabLayout tabs;
     Toolbar toolbar_board;
-    WeeklyFragmentTmp fragment_weekly;
+    WeeklyFragment fragment_weekly;
     GalleryFragment fragment_gallery;
 
     //Fragment 변경위해
@@ -32,7 +32,7 @@
         toolbar_board = (Toolbar) view.findViewById(R.id.toolbarBoard);
         ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar_board);
 
-        fragment_weekly = new WeeklyFragmentTmp();
+        fragment_weekly = new WeeklyFragment();
         fragment_gallery = new GalleryFragment();
 
         getActivity().getSupportFragmentManager().beginTransaction().add(R.id.containerTabs, fragment_weekly).commit();
Index: app/src/main/java/com/example/studyproject/GalleryFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.studyproject;\r\n\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\n\r\nimport java.util.Objects;\r\n\r\npublic class GalleryFragment extends Fragment {\r\n    ImageView iv_gallery1;\r\n\r\n\r\n    public GalleryFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        ViewGroup view = (ViewGroup) inflater.inflate(R.layout.fragment_gallery, container, false);\r\n\r\n        iv_gallery1 = view.findViewById(R.id.imageViewGallery1);\r\n\r\n        clickLoad(view);\r\n        return view;\r\n    }\r\n\r\n    public void clickLoad(View view) {\r\n\r\n        //Firebase Storage에 저장되어 있는 이미지 파일 읽어오기\r\n\r\n        //1. Firebase Storeage관리 객체 얻어오기\r\n        FirebaseStorage firebaseStorage = FirebaseStorage.getInstance();\r\n\r\n        //2. 최상위노드 참조 객체 얻어오기\r\n        StorageReference rootRef = firebaseStorage.getReference();\r\n\r\n        //읽어오길 원하는 파일의 참조객체 얻어오기\r\n        StorageReference imgRef = rootRef.child(\"gallery/000010.jpg\");\r\n        //하위 폴더가 있다면 폴더명까지 포함하여\r\n        //imgRef= rootRef.child(\"photo/000010.jng\");\r\n\r\n        if (imgRef != null) {\r\n            //참조객체로 부터 이미지의 다운로드 URL을 얻어오기\r\n            imgRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\r\n                @Override\r\n                public void onSuccess(Uri uri) {\r\n                    //다운로드 URL이 파라미터로 전달되어 옴.\r\n                    Glide.with(Objects.requireNonNull(getActivity())).load(uri).into(iv_gallery1);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/studyproject/GalleryFragment.java	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ app/src/main/java/com/example/studyproject/GalleryFragment.java	(date 1621962614964)
@@ -1,24 +1,28 @@
 package com.example.studyproject;
 
-import android.net.Uri;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
 import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
+import android.widget.TextView;
 
+import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
+import androidx.recyclerview.widget.GridLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
 
-import com.bumptech.glide.Glide;
-import com.google.android.gms.tasks.OnSuccessListener;
+import com.firebase.ui.database.FirebaseRecyclerAdapter;
+import com.firebase.ui.database.FirebaseRecyclerOptions;
+import com.google.firebase.database.DatabaseReference;
 import com.google.firebase.storage.FirebaseStorage;
 import com.google.firebase.storage.StorageReference;
 
-import java.util.Objects;
-
 public class GalleryFragment extends Fragment {
-    ImageView iv_gallery1;
-
+    private RecyclerView GalleryPhotoList;
+    private StorageReference storageRef;
 
     public GalleryFragment() {
         // Required empty public constructor
@@ -26,40 +30,61 @@
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        ViewGroup view = (ViewGroup) inflater.inflate(R.layout.fragment_gallery, container, false);
+        View galleryView = (View) inflater.inflate(R.layout.fragment_gallery, container, false);
 
-        iv_gallery1 = view.findViewById(R.id.imageViewGallery1);
+        GalleryPhotoList = (RecyclerView) galleryView.findViewById(R.id.recyclerviewGallery);
+        GalleryPhotoList.setLayoutManager(new GridLayoutManager(getContext(), 3));
 
-        clickLoad(view);
-        return view;
-    }
+        FirebaseStorage storage = FirebaseStorage.getInstance("gs://fir-test-1-35648.appspot.com");
+        storageRef = storage.getReference();
+        StorageReference pathReference = storageRef.child("gallery");
 
-    public void clickLoad(View view) {
+        return galleryView;
+    }
 
-        //Firebase Storage에 저장되어 있는 이미지 파일 읽어오기
+    @Override
+    public void onStart() {
+        super.onStart();
 
-        //1. Firebase Storeage관리 객체 얻어오기
-        FirebaseStorage firebaseStorage = FirebaseStorage.getInstance();
+        FirebaseRecyclerOptions<GalleryDB> options = new FirebaseRecyclerOptions.Builder<GalleryDB>().build();
 
-        //2. 최상위노드 참조 객체 얻어오기
-        StorageReference rootRef = firebaseStorage.getReference();
+        FirebaseRecyclerAdapter<GalleryDB, GalleryViewHolder> adapter
+                = new FirebaseRecyclerAdapter<GalleryDB, GalleryViewHolder>(options) {
 
-        //읽어오길 원하는 파일의 참조객체 얻어오기
-        StorageReference imgRef = rootRef.child("gallery/000010.jpg");
-        //하위 폴더가 있다면 폴더명까지 포함하여
-        //imgRef= rootRef.child("photo/000010.jng");
-
-        if (imgRef != null) {
-            //참조객체로 부터 이미지의 다운로드 URL을 얻어오기
-            imgRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
-                @Override
-                public void onSuccess(Uri uri) {
-                    //다운로드 URL이 파라미터로 전달되어 옴.
-                    Glide.with(Objects.requireNonNull(getActivity())).load(uri).into(iv_gallery1);
-                }
-            });
+            @Override
+            protected void onBindViewHolder(@NonNull GalleryViewHolder holder, int position, @NonNull GalleryDB model) {
+                GlideApp.with(holder.itemView)
+                        .load(storageRef)
+                        .into(holder.iv_photo);
+            }
+
+            @NonNull
+            @Override
+            public GalleryViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.gallery_layout, parent, false);
+                return new GalleryViewHolder(view);
+            }
+
+
+        };
 
-        }
+        GalleryPhotoList.setAdapter(adapter);
+        adapter.startListening();
+    }
 
+    public class GalleryViewHolder extends RecyclerView.ViewHolder {
+        ImageView iv_photo;
+        TextView tv_phototext;
+
+        public GalleryViewHolder(@NonNull View itemView) {
+            super(itemView);
+
+            iv_photo = (ImageView) itemView.findViewById(R.id.imageViewPhoto);
+            tv_phototext = (TextView) itemView.findViewById(R.id.textViewPhotoText);
+        }
     }
+
+
+
+
 }
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.google.gms.google-services'\r\n\r\nandroid {\r\n    compileSdkVersion 30\r\n    buildToolsVersion \"30.0.2\"\r\n\r\n    defaultConfig {\r\n        applicationId \"com.example.studyproject\"\r\n        minSdkVersion 26\r\n        targetSdkVersion 30\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n    implementation 'com.android.volley:volley:1.1.1'\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n    //toolbar\r\n    implementation 'com.android.support:appcompat-v7:30.0.2'\r\n    //tablayout\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.firebase:firebase-storage:19.2.2'\r\n    implementation 'androidx.wear:wear:1.0.0'\r\n    testImplementation 'junit:junit:4.12'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n\r\n    //cardview\r\n    implementation \"androidx.cardview:cardview:1.0.0\"\r\n    compileOnly 'com.google.android.wearable:wearable:2.6.0'\r\n\r\n    //room\r\n    def room_version = \"2.2.6\"\r\n    implementation \"androidx.room:room-runtime:$room_version\"\r\n    annotationProcessor \"androidx.room:room-compiler:$room_version\"\r\n    // optional - RxJava support for Room\r\n    implementation \"androidx.room:room-rxjava2:$room_version\"\r\n    // optional - Guava support for Room, including Optional and ListenableFuture\r\n    implementation \"androidx.room:room-guava:$room_version\"\r\n    // optional - Test helpers\r\n    testImplementation \"androidx.room:room-testing:$room_version\"\r\n\r\n    //firebase\r\n    implementation platform('com.google.firebase:firebase-bom:26.8.0')\r\n    implementation 'com.google.firebase:firebase-analytics'\r\n    implementation 'com.google.firebase:firebase-auth:16.0.5'\r\n    implementation 'com.google.android.gms:play-services-auth:17.0.0'\r\n    implementation 'com.google.firebase:firebase-database:17.0.0'\r\n    implementation 'com.google.firebase:firebase-database:19.7.0' //추가\r\n    implementation 'com.google.firebase:firebase-core:10.2.1'\r\n    implementation 'com.google.firebase:firebase-database:19.6.0'\r\n    implementation 'com.firebaseui:firebase-ui-database:7.1.1'\r\n\r\n    //firebase storage\r\n    implementation 'com.google.firebase:firebase-storage:19.2.2'\r\n\r\n    // CircleImageView\r\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\r\n\r\n    //TedPermission\r\n    implementation 'gun0912.ted:tedpermission:2.0.0'\r\n\r\n    //glide 이미지 로딩\r\n    implementation 'com.github.bumptech.glide:glide:4.9.0'\r\n}\r\nbuildscript {\r\n    repositories {\r\n        google()\r\n        jcenter()\r\n    }\r\n\r\n    dependencies {\r\n        classpath 'com.google.gms:google-services:4.3.3'\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ app/build.gradle	(date 1621960811528)
@@ -41,7 +41,6 @@
     //tablayout
     implementation 'com.google.android.material:material:1.2.1'
     implementation 'androidx.legacy:legacy-support-v4:1.0.0'
-    implementation 'com.google.firebase:firebase-storage:19.2.2'
     implementation 'androidx.wear:wear:1.0.0'
     testImplementation 'junit:junit:4.12'
     androidTestImplementation 'androidx.test.ext:junit:1.1.2'
@@ -73,9 +72,6 @@
     implementation 'com.google.firebase:firebase-database:19.6.0'
     implementation 'com.firebaseui:firebase-ui-database:7.1.1'
 
-    //firebase storage
-    implementation 'com.google.firebase:firebase-storage:19.2.2'
-
     // CircleImageView
     implementation 'de.hdodenhof:circleimageview:3.1.0'
 
@@ -84,6 +80,11 @@
 
     //glide 이미지 로딩
     implementation 'com.github.bumptech.glide:glide:4.9.0'
+    //+ 이미지로딩
+    implementation 'com.google.firebase:firebase-storage:20.0.0'
+    implementation 'com.github.bumptech.glide.annotations:4.7.1'
+    annotationProcessor 'com.github.bumptech.glide.complier:4.7.1'
+    implementation 'com.firebaseui:firebase-ui-storage:3.3.0'
 }
 buildscript {
     repositories {
Index: app/src/main/java/com/example/studyproject/WeeklyFragmentTmp.java
===================================================================
--- app/src/main/java/com/example/studyproject/WeeklyFragmentTmp.java	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ app/src/main/java/com/example/studyproject/WeeklyFragmentTmp.java	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
@@ -1,367 +0,0 @@
-package com.example.studyproject;
-
-import android.Manifest;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.graphics.ImageDecoder;
-import android.net.Uri;
-import android.os.Build;
-import android.os.Bundle;
-
-import android.os.Environment;
-import android.provider.MediaStore;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageButton;
-import android.widget.ImageView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.core.content.FileProvider;
-import androidx.fragment.app.Fragment;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.firebase.ui.database.FirebaseRecyclerAdapter;
-import com.firebase.ui.database.FirebaseRecyclerOptions;
-import com.google.android.gms.tasks.OnFailureListener;
-import com.google.android.gms.tasks.OnSuccessListener;
-import com.google.firebase.database.DataSnapshot;
-import com.google.firebase.database.DatabaseError;
-import com.google.firebase.database.DatabaseReference;
-import com.google.firebase.database.FirebaseDatabase;
-import com.google.firebase.database.ValueEventListener;
-import com.google.firebase.storage.FirebaseStorage;
-import com.google.firebase.storage.StorageReference;
-import com.google.firebase.storage.UploadTask;
-import com.gun0912.tedpermission.PermissionListener;
-import com.gun0912.tedpermission.TedPermission;
-
-
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-
-import static android.app.Activity.RESULT_OK;
-
-public class WeeklyFragmentTmp extends Fragment {
-    private View weeklyView;
-    private RecyclerView myWeeklyList;
-    private DatabaseReference WeeklyRef, WeekRef;
-    private Uri photoUri;
-    private String mCurrentPhotoPath, downloadUrl;
-    private static final int FROM_CAMERA = 0;
-    private static final int FROM_ALBUM = 1;
-    private int flag = 0;
-    private FirebaseStorage storage;
-
-
-    public WeeklyFragmentTmp() {
-        // Required empty public constructor
-    }
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container,
-                             Bundle savedInstanceState) {
-
-        weeklyView = (View) inflater.inflate(R.layout.fragment_weekly_tmp, container, false);
-
-        myWeeklyList = (RecyclerView) weeklyView.findViewById(R.id.recyclerviewWeekly);
-        myWeeklyList.setLayoutManager(new LinearLayoutManager(getContext()));
-
-        WeeklyRef = FirebaseDatabase.getInstance().getReference().child("weekly");
-        WeekRef = FirebaseDatabase.getInstance().getReference().child("weekly");
-
-        PermissionListener permissionlistener = new PermissionListener() {
-            @Override
-            public void onPermissionGranted() {
-                Toast.makeText(getActivity(), "권한 허가", Toast.LENGTH_SHORT).show();
-            }
-
-            @Override
-            public void onPermissionDenied(ArrayList<String> deniedPermissions) {
-                Toast.makeText(getActivity(), "권한 거부\n" + deniedPermissions.toString(), Toast.LENGTH_SHORT).show();
-            }
-
-
-        };
-
-        TedPermission.with(getContext())
-                .setPermissionListener(permissionlistener)
-                .setDeniedMessage("If you reject permission,you can not use this service\n\nPlease turn on permissions at [Setting] > [Permission] ")
-                .setPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA)
-                .check();
-
-        return weeklyView;
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-
-        FirebaseRecyclerOptions<WeeklyDB> options = new FirebaseRecyclerOptions.Builder<WeeklyDB>()
-                .setQuery(WeeklyRef, WeeklyDB.class).build();
-
-        FirebaseRecyclerAdapter<WeeklyDB, WeeklyViewHolder> adapter
-                = new FirebaseRecyclerAdapter<WeeklyDB, WeeklyViewHolder>(options) {
-            @Override
-            protected void onBindViewHolder(@NonNull WeeklyViewHolder holder, int position, @NonNull WeeklyDB model) {
-                String week = getRef(position).getKey();
-
-                WeekRef.child(week).addValueEventListener(new ValueEventListener() {
-                    @Override
-                    public void onDataChange(@NonNull DataSnapshot snapshot) {
-                        if (snapshot.hasChild("weekly")) {
-                            String week_num = snapshot.child("week").getValue().toString();
-                            String week_todo = snapshot.child("todo").getValue().toString();
-
-                            holder.tv_week.setText(week_num);
-                            holder.tv_todo.setText(week_todo);
-                        } else {
-                            String week_num = snapshot.child("week").getValue().toString();
-                            String week_todo = snapshot.child("todo").getValue().toString();
-
-                            holder.tv_week.setText(week_num);
-                            holder.tv_todo.setText(week_todo);
-                        }
-                    }
-
-                    @Override
-                    public void onCancelled(@NonNull DatabaseError error) {
-
-                    }
-                });
-
-            }
-
-            @NonNull
-            @Override
-            public WeeklyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
-                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.weekly_layout, parent, false);
-                WeeklyViewHolder viewHolder = new WeeklyViewHolder(view);
-                return viewHolder;
-            }
-        };
-
-        myWeeklyList.setAdapter(adapter);
-        adapter.startListening();
-    }
-
-    public class WeeklyViewHolder extends RecyclerView.ViewHolder {
-        TextView tv_week, tv_todo;
-        ImageButton ibt_camera, ibt_timer;
-        TimerFragment fragment_timer;
-
-        public WeeklyViewHolder(@NonNull View itemView) {
-            super(itemView);
-
-            tv_week = (TextView) itemView.findViewById(R.id.textViewWeek);
-            tv_todo = (TextView) itemView.findViewById(R.id.textViewTodo);
-            fragment_timer = new TimerFragment();
-
-            ibt_camera = (ImageButton)itemView.findViewById(R.id.imageButtonCamera);
-            ibt_camera.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    DialogInterface.OnClickListener cameraListener = new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            flag = 0;
-                            takePhoto();
-                            uploadPhoto();
-                        }
-                    };
-
-                    DialogInterface.OnClickListener albumListener = new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            flag = 1;
-                            selectAlbum();
-                            uploadPhoto();
-                        }
-                    };
-
-                    DialogInterface.OnClickListener cancelListener = new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            dialog.dismiss();
-                        }
-                    };
-
-                    new AlertDialog.Builder(getContext())
-                            .setTitle("업로드할 이미지 선택")
-                            .setPositiveButton("사진촬영", cameraListener)
-                            .setNeutralButton("앨범선택", albumListener)
-                            .setNegativeButton("취소", cancelListener)
-                            .show();
-                }
-            });
-
-            ibt_timer = (ImageButton)itemView.findViewById(R.id.imageButtonTimer);
-            ibt_timer.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.containerTabs, fragment_timer).commit();
-                }
-            });
-        }
-    }
-
-    public void takePhoto() {
-        // 카메라 인텐트 실행
-        String state = Environment.getExternalStorageState();
-        if(Environment.MEDIA_MOUNTED.equals(state)) {
-            Intent takePhotoIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-            if(takePhotoIntent.resolveActivity(getActivity().getApplicationContext().getPackageManager())!=null){
-                File photoFile = null;
-                try{
-                    photoFile = createImageFile();
-                } catch (IOException e){
-                    e.printStackTrace();
-                }
-                if(photoFile!=null){
-                    Uri photoURI = FileProvider.getUriForFile(getActivity().getApplicationContext(), "com.example.studyproject.fileprovider", photoFile);
-                    takePhotoIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, photoURI);
-                    startActivityForResult(takePhotoIntent, FROM_CAMERA);
-                }
-            }
-        } else {
-            Log.v("알림", "저장공간에 접근 불가능");
-            return;
-        }
-    }
-
-    //사용자 휴대폰 갤러리에 저장
-    public File createImageFile() throws IOException{ 
-        String imgFileName = System.currentTimeMillis() + ".jpg";
-        File imageFile= null;
-        File storageDir = new File(Environment.getExternalStorageDirectory() + "/DCIM", "honeystudy"); //chilㅇ
-
-        if(!storageDir.exists()){
-            //없으면 만들기
-            Log.v("알림","storageDir 존재 x " + storageDir.toString());
-            storageDir.mkdirs();
-        }
-        Log.v("알림","storageDir 존재함 " + storageDir.toString());
-        imageFile = new File(storageDir,imgFileName);
-        mCurrentPhotoPath = imageFile.getAbsolutePath();
-        return imageFile;
-    }
-
-    public void addPhotoToGallery(){
-        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
-        File f = new File(mCurrentPhotoPath);
-        Uri contentUri = Uri.fromFile(f);
-        mediaScanIntent.setData(contentUri);
-        getActivity().sendBroadcast(mediaScanIntent);
-        Toast.makeText(getActivity(),"사진이 저장되었습니다",Toast.LENGTH_SHORT).show();
-    }
-
-    public void selectAlbum(){
-        //앨범에서 이미지 가져옴
-        //앨범 열기
-        Intent intent = new Intent(Intent.ACTION_PICK);
-        intent.setType(MediaStore.Images.Media.CONTENT_TYPE);
-        intent.setType("image/*");
-        startActivityForResult(intent, FROM_ALBUM);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        if (resultCode != RESULT_OK) {
-            return;
-        }
-        switch (requestCode) {
-            case FROM_ALBUM: {
-                //앨범에서 가져오기
-                if (data.getData() != null) {
-                    try {
-                        photoUri = data.getData();
-                    } catch (Exception e) {
-                        e.printStackTrace();
-                    }
-                }
-                break;
-            }
-
-            case FROM_CAMERA: {
-                //카메라 촬영
-                try {
-                    addPhotoToGallery();
-                } catch (Exception e) {
-                    e.printStackTrace();
-                }
-                break;
-            }
-        }
-    }
-
-    public void uploadPhoto() {
-        AlertDialog.Builder alt_bld = new AlertDialog.Builder(getContext()); //R.style.추가
-        alt_bld.setTitle("사진 선택 완료").setMessage("사진을 등록하시겠습니까?").setCancelable(
-                false).setPositiveButton("네",
-                new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int id) {
-                        //DB에 등록하기
-                        storage = FirebaseStorage.getInstance("gs://fir-test-1-35648.appspot.com");
-//                        final String cu = mAuth.getUid();
-                        //1. 사진을 storage에 저장하고 그 url을 알아내야 함
-                        String filename = "" + System.currentTimeMillis(); //cu + "_" +
-                        StorageReference storageRef = storage.getReference();
-                        StorageReference galleryRdf = storageRef.child("gallery/" +filename);
-                        UploadTask uploadTask;
-                        Uri file = null;
-                        if(flag ==0){
-                            //사진촬영
-                            file = Uri.fromFile(new File(mCurrentPhotoPath));
-                        } else if(flag==1){
-                            //앨범선택
-                            file = photoUri;
-                        }
-                        uploadTask = galleryRdf.putFile(file);
-                        final ProgressDialog progressDialog = new ProgressDialog(getContext());
-                        progressDialog.setMessage("업로드중");
-                        progressDialog.show();
-
-                        // Register observers to listen for when the download is done or if it fails
-                        uploadTask.addOnFailureListener(new OnFailureListener() {
-                            @Override
-                            public void onFailure(@NonNull Exception exception) {
-                                // Handle unsuccessful uploads
-                                Log.v("알림", "사진 업로드 실패");
-                                progressDialog.dismiss();
-                                exception.printStackTrace();
-
-                            }
-                        }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
-                            @Override
-                            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
-                                // taskSnapshot.getMetadata() contains file metadata such as size, content-type, and download URL.
-                                downloadUrl = taskSnapshot.getMetadata().getReference().getDownloadUrl().toString();
-                                Log.v("알림", "사진 업로드 성공 " + downloadUrl);
-                                progressDialog.dismiss();
-                                Toast.makeText(getActivity(), "사진이 업로드 되었습니다.", Toast.LENGTH_SHORT).show();
-
-                            }
-                        });
-                    }
-                }).setNegativeButton("아니오",
-                new DialogInterface.OnClickListener() {
-                    public void onClick(DialogInterface dialog, int id) {
-                        // 아니오 클릭. dialog 닫기.
-                        dialog.cancel();
-                    }
-                });
-        AlertDialog alert = alt_bld.create();
-        alert.show();
-    }
-
-
-}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_weekly_tmp.xml
===================================================================
--- app/src/main/res/layout/fragment_weekly_tmp.xml	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ app/src/main/res/layout/fragment_weekly_tmp.xml	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:orientation="vertical"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:layout_gravity="center_vertical">
-
-    <TextView
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:textSize="30sp"
-        android:text="주차별 계획"
-        android:gravity="center" />
-
-    <androidx.recyclerview.widget.RecyclerView
-        android:id="@+id/recyclerviewWeekly"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent" >
-    </androidx.recyclerview.widget.RecyclerView>
-
-</LinearLayout>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2021-05-16_오후_8_25_[Default_Changelist]/shelved.patch
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_2021-05-16_오후_8_25_[Default_Changelist]/shelved.patch	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_2021-05-16_오후_8_25_[Default_Changelist]/shelved.patch	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
@@ -1,37 +0,0 @@
-Index: app/src/main/AndroidManifest.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.studyproject\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n\r\n    <!--    카메라, 내부 저장소 접근 권한 설정-->\r\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\r\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\r\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\r\n    <uses-feature android:name=\"android.hardware.camera\" android:required=\"true\"/>\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\"\r\n        android:usesCleartextTraffic=\"true\" >\r\n\r\n        <activity android:name=\".MainActivity\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity android:name=\".RegisterActivity\" />\r\n        <activity android:name=\".HomeActivity\">\r\n        </activity>\r\n        <activity android:name=\".LoginActivity\">\r\n        </activity>\r\n        <activity android:name=\".SettingActivity\">\r\n        </activity>\r\n        <activity android:name=\".SearchDetail\">\r\n        </activity>\r\n        <provider android:name=\"androidx.core.content.FileProvider\"\r\n            android:authorities=\"com.example.studyproject.fileprovider\"\r\n            android:exported=\"false\"\r\n            android:grantUriPermissions=\"true\">\r\n            <meta-data\r\n                android:name=\"android.support.FILE_PROVIDER_PATHS\"\r\n                android:resource=\"@xml/file_paths\" />\r\n        </provider>\r\n        <activity android:name=\".MakeRoom\">\r\n        </activity>\r\n\r\n    </application>\r\n\r\n</manifest>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/AndroidManifest.xml	(revision cc21a4760d69a39a43331b74641651c02f10fa22)
-+++ app/src/main/AndroidManifest.xml	(date 1619875821022)
-@@ -36,7 +36,7 @@
-         <activity android:name=".SearchDetail">
-         </activity>
-         <provider android:name="androidx.core.content.FileProvider"
--            android:authorities="com.example.studyproject.fileprovider"
-+            android:authorities="com.example.studyproject"
-             android:exported="false"
-             android:grantUriPermissions="true">
-             <meta-data
-Index: app/src/main/java/com/example/studyproject/GalleryFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.studyproject;\r\n\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\n\r\nimport java.util.Objects;\r\n\r\npublic class GalleryFragment extends Fragment {\r\n    ImageView iv_gallery1;\r\n\r\n\r\n    public GalleryFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        ViewGroup view = (ViewGroup) inflater.inflate(R.layout.fragment_gallery, container, false);\r\n\r\n        iv_gallery1 = view.findViewById(R.id.imageViewGallery1);\r\n\r\n        clickLoad(view);\r\n        return view;\r\n    }\r\n\r\n    public void clickLoad(View view) {\r\n\r\n        //Firebase Storage에 저장되어 있는 이미지 파일 읽어오기\r\n\r\n        //1. Firebase Storeage관리 객체 얻어오기\r\n        FirebaseStorage firebaseStorage = FirebaseStorage.getInstance();\r\n\r\n        //2. 최상위노드 참조 객체 얻어오기\r\n        StorageReference rootRef = firebaseStorage.getReference();\r\n\r\n        //읽어오길 원하는 파일의 참조객체 얻어오기\r\n        StorageReference imgRef = rootRef.child(\"gallery/000010.png\");\r\n        //하위 폴더가 있다면 폴더명까지 포함하여\r\n        //imgRef= rootRef.child(\"photo/000010.jng\");\r\n\r\n        if (imgRef != null) {\r\n            //참조객체로 부터 이미지의 다운로드 URL을 얻어오기\r\n            imgRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {\r\n                @Override\r\n                public void onSuccess(Uri uri) {\r\n                    //다운로드 URL이 파라미터로 전달되어 옴.\r\n                    Glide.with(Objects.requireNonNull(getActivity())).load(uri).into(iv_gallery1);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
---- app/src/main/java/com/example/studyproject/GalleryFragment.java	(revision cc21a4760d69a39a43331b74641651c02f10fa22)
-+++ app/src/main/java/com/example/studyproject/GalleryFragment.java	(date 1619875821032)
-@@ -45,7 +45,7 @@
-         StorageReference rootRef = firebaseStorage.getReference();
- 
-         //읽어오길 원하는 파일의 참조객체 얻어오기
--        StorageReference imgRef = rootRef.child("gallery/000010.png");
-+        StorageReference imgRef = rootRef.child("gallery/000010.jpg");
-         //하위 폴더가 있다면 폴더명까지 포함하여
-         //imgRef= rootRef.child("photo/000010.jng");
- 
-diff --git .idea/shelf/Uncommitted_changes_before_Update_at_2_13_21_2_31_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_2_13_21_2_31_AM__Default_Changelist_.xml
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2021-05-16__8_25__Default_Changelist_.xml
===================================================================
--- .idea/shelf/Uncommitted_changes_before_Update_at_2021-05-16__8_25__Default_Changelist_.xml	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ .idea/shelf/Uncommitted_changes_before_Update_at_2021-05-16__8_25__Default_Changelist_.xml	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_2021-05-16_오후_8_25_[Default_Changelist]" date="1621164358774" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_2021-05-16_오후_8_25_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 2021-05-16 오후 8:25 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: app/src/main/java/com/example/studyproject/WeeklyFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.studyproject;\r\n\r\nimport android.Manifest;\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.ImageDecoder;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.provider.MediaStore;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.core.content.FileProvider;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Date;\r\n\r\nimport static android.app.Activity.RESULT_OK;\r\n\r\npublic class WeeklyFragment extends Fragment implements View.OnClickListener {\r\n    final private static String TAG = \"태그명\";\r\n    ImageButton ibt_camera, ibt_timer;\r\n    ImageView iv_photo;\r\n    String mCurrentPhotoPath;\r\n    String absoultePath;\r\n    private static final int PICK_FROM_CAMERA = 0;\r\n    private static final int PICK_FROM_ALBUM = 1;\r\n    private static final int CROP_FROM_IMAGE = 2;\r\n    TimerFragment fragment_timer;\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n\r\n        ViewGroup view = (ViewGroup)inflater.inflate(R.layout.fragment_weekly, container, false);\r\n\r\n        ibt_camera = (ImageButton)view.findViewById(R.id.imageButtonCamera);\r\n        ibt_camera.setOnClickListener(this);\r\n\r\n        fragment_timer = new TimerFragment();\r\n        ibt_timer = (ImageButton)view.findViewById(R.id.imageButtonTimer);\r\n        ibt_timer.setOnClickListener(this);\r\n\r\n        iv_photo = view.findViewById(R.id.imageViewTempGallery); //수정\r\n\r\n        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            if(ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {\r\n                Log.d(TAG, \"권한 설정 완료\");\r\n            } else { Log.d(TAG, \"권한 설정 요청\");\r\n                requestPermissions(new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);\r\n            }\r\n        }\r\n\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()) {\r\n            case R.id.imageButtonCamera:\r\n                DialogInterface.OnClickListener cameraListener = new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        dispatchTakePictureIntent();\r\n                    }\r\n                };\r\n\r\n                DialogInterface.OnClickListener albumListener = new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        doTakeAlbumAction();\r\n                    }\r\n                };\r\n\r\n                DialogInterface.OnClickListener cancelListener = new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        dialog.dismiss();\r\n                    }\r\n                };\r\n                new AlertDialog.Builder(getContext())\r\n                        .setTitle(\"업로드할 이미지 선택\")\r\n                        .setPositiveButton(\"사진촬영\", cameraListener)\r\n                        .setNeutralButton(\"앨범선택\", albumListener)\r\n                        .setNegativeButton(\"취소\", cancelListener)\r\n                        .show();\r\n                break;\r\n            case R.id.imageButtonTimer:\r\n                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.containerTabs, fragment_timer).commit();\r\n                break;\r\n        }\r\n    }\r\n\r\n    //권한요청\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        Log.d(TAG, \"onRequestPermissionsResult\");\r\n        if (grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED ) {\r\n            Log.d(TAG, \"Permission: \" + permissions[0] + \"was \" + grantResults[0]);\r\n        }\r\n    }\r\n\r\n    public void doTakeAlbumAction() // 앨범에서 이미지 가져오기\r\n    {\r\n        Intent intent = new Intent();\r\n        intent.setType(\"image/*\");\r\n        intent.setAction(Intent.ACTION_GET_CONTENT);\r\n        startActivityForResult(intent, PICK_FROM_ALBUM);\r\n    }\r\n\r\n    // 카메라로 촬영한 영상을 가져오는 부분\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        try {\r\n            switch (requestCode) {\r\n                case PICK_FROM_ALBUM: {\r\n                    if(resultCode == RESULT_OK)\r\n                    {\r\n                        try{\r\n                            InputStream in = getActivity().getContentResolver().openInputStream(data.getData());\r\n\r\n                            Bitmap img = BitmapFactory.decodeStream(in);\r\n                            in.close();\r\n\r\n                            iv_photo.setImageBitmap(img);\r\n                        } catch(Exception e) { }\r\n                    }\r\n                    break;\r\n                }\r\n\r\n                case PICK_FROM_CAMERA: {\r\n                    if (resultCode == RESULT_OK) {\r\n                        File file = new File(mCurrentPhotoPath);\r\n                        Bitmap bitmap;\r\n                        if (Build.VERSION.SDK_INT >= 29) {\r\n                            ImageDecoder.Source source = ImageDecoder.createSource(getActivity().getApplicationContext().getContentResolver(), Uri.fromFile(file));\r\n                            try {\r\n                                bitmap = ImageDecoder.decodeBitmap(source);\r\n                                if (bitmap != null) { iv_photo.setImageBitmap(bitmap);\r\n                                }\r\n                            } catch (IOException e) { e.printStackTrace(); }\r\n                        }\r\n                        else {\r\n                            try {\r\n                                bitmap = MediaStore.Images.Media.getBitmap(getActivity().getApplicationContext().getContentResolver(), Uri.fromFile(file));\r\n                                if (bitmap != null) {\r\n                                    iv_photo.setImageBitmap(bitmap);\r\n                                }\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n                    } break;\r\n                }\r\n            }\r\n        } catch (Exception error) {\r\n            error.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // 사진 촬영 후 썸네일만 띄워줌. 이미지를 파일로 저장해야 함\r\n    private File createImageFile() throws IOException {\r\n        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\r\n        String imageFileName = \"JPEG_\" + timeStamp + \"_\";\r\n        File storageDir = getActivity().getApplicationContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES);\r\n        File image = File.createTempFile( imageFileName, \".jpg\", storageDir );\r\n        mCurrentPhotoPath = image.getAbsolutePath(); return image;\r\n    }\r\n\r\n    // 카메라 인텐트 실행하는 부분\r\n    private void dispatchTakePictureIntent() {\r\n        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n        if(takePictureIntent.resolveActivity(getActivity().getApplicationContext().getPackageManager()) != null) {\r\n            File photoFile = null;\r\n            try { photoFile = createImageFile();\r\n            } catch (IOException ex) { }\r\n            if(photoFile != null) {\r\n                Uri photoURI = FileProvider.getUriForFile(getActivity().getApplicationContext(), \"com.example.studyproject.fileprovider\", photoFile);\r\n                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);\r\n                startActivityForResult(takePictureIntent, PICK_FROM_CAMERA);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void storeCropImage(Bitmap bitmap, String filePath) {\r\n        // SmartWheel 폴더를 생성하여 이미지를 저장하는 방식이다.\r\n        String dirPath = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/SmartWheel\";\r\n        File directory_SmartWheel = new File(dirPath);\r\n        if (!directory_SmartWheel.exists()) // SmartWheel 디렉터리에 폴더가 없다면 (새로 이미지를 저장할 경우에 속한다.)\r\n            directory_SmartWheel.mkdir();\r\n        File copyFile = new File(filePath);\r\n        BufferedOutputStream out = null;\r\n        try {\r\n            copyFile.createNewFile();\r\n            out = new BufferedOutputStream(new FileOutputStream(copyFile));\r\n            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);\r\n            // sendBroadcast를 통해 Crop된 사진을 앨범에 보이도록 갱신한다.\r\n            if (getActivity() != null) {\r\n                getActivity().sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(copyFile)));\r\n\r\n            }\r\n            out.flush();\r\n            out.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/studyproject/WeeklyFragment.java	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ app/src/main/java/com/example/studyproject/WeeklyFragment.java	(date 1621956265167)
@@ -2,15 +2,12 @@
 
 import android.Manifest;
 import android.app.AlertDialog;
+import android.app.ProgressDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
-import android.content.pm.PackageManager;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.ImageDecoder;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
+
 import android.os.Environment;
 import android.provider.MediaStore;
 import android.util.Log;
@@ -18,212 +15,348 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageButton;
-import android.widget.ImageView;
+import android.widget.TextView;
+import android.widget.Toast;
 
 import androidx.annotation.NonNull;
-import androidx.core.content.ContextCompat;
 import androidx.core.content.FileProvider;
 import androidx.fragment.app.Fragment;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.firebase.ui.database.FirebaseRecyclerAdapter;
+import com.firebase.ui.database.FirebaseRecyclerOptions;
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.ValueEventListener;
+import com.google.firebase.storage.FirebaseStorage;
+import com.google.firebase.storage.StorageReference;
+import com.google.firebase.storage.UploadTask;
+import com.gun0912.tedpermission.PermissionListener;
+import com.gun0912.tedpermission.TedPermission;
 
-import java.io.BufferedOutputStream;
+
 import java.io.File;
-import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.InputStream;
-import java.text.SimpleDateFormat;
-import java.util.Date;
+import java.util.ArrayList;
 
 import static android.app.Activity.RESULT_OK;
 
-public class WeeklyFragment extends Fragment implements View.OnClickListener {
-    final private static String TAG = "태그명";
-    ImageButton ibt_camera, ibt_timer;
-    ImageView iv_photo;
-    String mCurrentPhotoPath;
-    String absoultePath;
-    private static final int PICK_FROM_CAMERA = 0;
-    private static final int PICK_FROM_ALBUM = 1;
-    private static final int CROP_FROM_IMAGE = 2;
-    TimerFragment fragment_timer;
+public class WeeklyFragment extends Fragment {
+    private RecyclerView myWeeklyList;
+    private DatabaseReference WeeklyRef, WeekRef;
+    private Uri photoUri;
+    private String mCurrentPhotoPath, downloadUrl;
+    private static final int FROM_CAMERA = 0;
+    private static final int FROM_ALBUM = 1;
+    private int flag = 0;
+    private FirebaseStorage storage;
+
+
+    public WeeklyFragment() {
+        // Required empty public constructor
+    }
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
 
-        ViewGroup view = (ViewGroup)inflater.inflate(R.layout.fragment_weekly, container, false);
+        View weeklyView = (View) inflater.inflate(R.layout.fragment_weekly, container, false);
+
+        myWeeklyList = (RecyclerView) weeklyView.findViewById(R.id.recyclerviewWeekly);
+        myWeeklyList.setLayoutManager(new LinearLayoutManager(getContext()));
+
+        WeeklyRef = FirebaseDatabase.getInstance().getReference().child("weekly");
+        WeekRef = FirebaseDatabase.getInstance().getReference().child("weekly");
+
+        PermissionListener permissionlistener = new PermissionListener() {
+            @Override
+            public void onPermissionGranted() {
+                Toast.makeText(getActivity(), "권한 허가", Toast.LENGTH_SHORT).show();
+            }
+
+            @Override
+            public void onPermissionDenied(ArrayList<String> deniedPermissions) {
+                Toast.makeText(getActivity(), "권한 거부\n" + deniedPermissions.toString(), Toast.LENGTH_SHORT).show();
+            }
+
+
+        };
+
+        TedPermission.with(getContext())
+                .setPermissionListener(permissionlistener)
+                .setDeniedMessage("If you reject permission,you can not use this service\n\nPlease turn on permissions at [Setting] > [Permission] ")
+                .setPermissions(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA)
+                .check();
+
+        return weeklyView;
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+
+        FirebaseRecyclerOptions<WeeklyDB> options = new FirebaseRecyclerOptions.Builder<WeeklyDB>()
+                .setQuery(WeeklyRef, WeeklyDB.class).build();
+
+        FirebaseRecyclerAdapter<WeeklyDB, WeeklyViewHolder> adapter
+                = new FirebaseRecyclerAdapter<WeeklyDB, WeeklyViewHolder>(options) {
+            @Override
+            protected void onBindViewHolder(@NonNull WeeklyViewHolder holder, int position, @NonNull WeeklyDB model) {
+                String week = getRef(position).getKey();
+
+                WeekRef.child(week).addValueEventListener(new ValueEventListener() {
+                    @Override
+                    public void onDataChange(@NonNull DataSnapshot snapshot) {
+                        if (snapshot.hasChild("weekly")) {
+                            String week_num = snapshot.child("week").getValue().toString();
+                            String week_todo = snapshot.child("todo").getValue().toString();
+
+                            holder.tv_week.setText(week_num);
+                            holder.tv_todo.setText(week_todo);
+                        } else {
+                            String week_num = snapshot.child("week").getValue().toString();
+                            String week_todo = snapshot.child("todo").getValue().toString();
+
+                            holder.tv_week.setText(week_num);
+                            holder.tv_todo.setText(week_todo);
+                        }
+                    }
+
+                    @Override
+                    public void onCancelled(@NonNull DatabaseError error) {
+
+                    }
+                });
 
-        ibt_camera = (ImageButton)view.findViewById(R.id.imageButtonCamera);
-        ibt_camera.setOnClickListener(this);
+            }
 
-        fragment_timer = new TimerFragment();
-        ibt_timer = (ImageButton)view.findViewById(R.id.imageButtonTimer);
-        ibt_timer.setOnClickListener(this);
-
-        iv_photo = view.findViewById(R.id.imageViewTempGallery); //수정
+            @NonNull
+            @Override
+            public WeeklyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.weekly_layout, parent, false);
+                WeeklyViewHolder viewHolder = new WeeklyViewHolder(view);
+                return viewHolder;
+            }
+        };
+
+        myWeeklyList.setAdapter(adapter);
+        adapter.startListening();
+    }
+
+    public class WeeklyViewHolder extends RecyclerView.ViewHolder {
+        TextView tv_week, tv_todo;
+        ImageButton ibt_camera, ibt_timer;
+        TimerFragment fragment_timer;
+
+        public WeeklyViewHolder(@NonNull View itemView) {
+            super(itemView);
+
+            tv_week = (TextView) itemView.findViewById(R.id.textViewWeek);
+            tv_todo = (TextView) itemView.findViewById(R.id.textViewTodo);
+            fragment_timer = new TimerFragment();
 
-        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
-            if(ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(getActivity(), Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
-                Log.d(TAG, "권한 설정 완료");
-            } else { Log.d(TAG, "권한 설정 요청");
-                requestPermissions(new String[]{Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
-            }
-        }
-
-        return view;
-    }
-
-    @Override
-    public void onClick(View v) {
-        switch (v.getId()) {
-            case R.id.imageButtonCamera:
-                DialogInterface.OnClickListener cameraListener = new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        dispatchTakePictureIntent();
-                    }
-                };
+            ibt_camera = (ImageButton)itemView.findViewById(R.id.imageButtonCamera);
+            ibt_camera.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    DialogInterface.OnClickListener cameraListener = new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            flag = 0;
+                            takePhoto();
+                            uploadPhoto();
+                        }
+                    };
 
-                DialogInterface.OnClickListener albumListener = new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        doTakeAlbumAction();
-                    }
-                };
+                    DialogInterface.OnClickListener albumListener = new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            flag = 1;
+                            selectAlbum();
+                            uploadPhoto();
+                        }
+                    };
 
-                DialogInterface.OnClickListener cancelListener = new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int which) {
-                        dialog.dismiss();
-                    }
-                };
-                new AlertDialog.Builder(getContext())
-                        .setTitle("업로드할 이미지 선택")
-                        .setPositiveButton("사진촬영", cameraListener)
-                        .setNeutralButton("앨범선택", albumListener)
-                        .setNegativeButton("취소", cancelListener)
-                        .show();
-                break;
-            case R.id.imageButtonTimer:
-                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.containerTabs, fragment_timer).commit();
-                break;
+                    DialogInterface.OnClickListener cancelListener = new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            dialog.dismiss();
+                        }
+                    };
+
+                    new AlertDialog.Builder(getContext())
+                            .setTitle("업로드할 이미지 선택")
+                            .setPositiveButton("사진촬영", cameraListener)
+                            .setNeutralButton("앨범선택", albumListener)
+                            .setNegativeButton("취소", cancelListener)
+                            .show();
+                }
+            });
+
+            ibt_timer = (ImageButton)itemView.findViewById(R.id.imageButtonTimer);
+            ibt_timer.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.containerTabs, fragment_timer).commit();
+                }
+            });
+        }
+    }
+
+    public void takePhoto() {
+        // 카메라 인텐트 실행
+        String state = Environment.getExternalStorageState();
+        if(Environment.MEDIA_MOUNTED.equals(state)) {
+            Intent takePhotoIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+            if(takePhotoIntent.resolveActivity(getActivity().getApplicationContext().getPackageManager())!=null){
+                File photoFile = null;
+                try{
+                    photoFile = createImageFile();
+                } catch (IOException e){
+                    e.printStackTrace();
+                }
+                if(photoFile!=null){
+                    Uri photoURI = FileProvider.getUriForFile(getActivity().getApplicationContext(), "com.example.studyproject.fileprovider", photoFile);
+                    takePhotoIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, photoURI);
+                    startActivityForResult(takePhotoIntent, FROM_CAMERA);
+                }
+            }
+        } else {
+            Log.v("알림", "저장공간에 접근 불가능");
+            return;
         }
     }
 
-    //권한요청
-    @Override
-    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
-        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
-        Log.d(TAG, "onRequestPermissionsResult");
-        if (grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED ) {
-            Log.d(TAG, "Permission: " + permissions[0] + "was " + grantResults[0]);
+    //사용자 휴대폰 갤러리에 저장
+    public File createImageFile() throws IOException{ 
+        String imgFileName = System.currentTimeMillis() + ".jpg";
+        File imageFile= null;
+        File storageDir = new File(Environment.getExternalStorageDirectory() + "/DCIM", "honeystudy"); //chilㅇ
+
+        if(!storageDir.exists()){
+            //없으면 만들기
+            Log.v("알림","storageDir 존재 x " + storageDir.toString());
+            storageDir.mkdirs();
         }
+        Log.v("알림","storageDir 존재함 " + storageDir.toString());
+        imageFile = new File(storageDir,imgFileName);
+        mCurrentPhotoPath = imageFile.getAbsolutePath();
+        return imageFile;
     }
 
-    public void doTakeAlbumAction() // 앨범에서 이미지 가져오기
-    {
-        Intent intent = new Intent();
+    public void addPhotoToGallery(){
+        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
+        File f = new File(mCurrentPhotoPath);
+        Uri contentUri = Uri.fromFile(f);
+        mediaScanIntent.setData(contentUri);
+        getActivity().sendBroadcast(mediaScanIntent);
+        Toast.makeText(getActivity(),"사진이 저장되었습니다",Toast.LENGTH_SHORT).show();
+    }
+
+    public void selectAlbum(){
+        //앨범에서 이미지 가져옴
+        //앨범 열기
+        Intent intent = new Intent(Intent.ACTION_PICK);
+        intent.setType(MediaStore.Images.Media.CONTENT_TYPE);
         intent.setType("image/*");
-        intent.setAction(Intent.ACTION_GET_CONTENT);
-        startActivityForResult(intent, PICK_FROM_ALBUM);
+        startActivityForResult(intent, FROM_ALBUM);
     }
 
-    // 카메라로 촬영한 영상을 가져오는 부분
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
-        try {
-            switch (requestCode) {
-                case PICK_FROM_ALBUM: {
-                    if(resultCode == RESULT_OK)
-                    {
-                        try{
-                            InputStream in = getActivity().getContentResolver().openInputStream(data.getData());
-
-                            Bitmap img = BitmapFactory.decodeStream(in);
-                            in.close();
-
-                            iv_photo.setImageBitmap(img);
-                        } catch(Exception e) { }
+        if (resultCode != RESULT_OK) {
+            return;
+        }
+        switch (requestCode) {
+            case FROM_ALBUM: {
+                //앨범에서 가져오기
+                if (data.getData() != null) {
+                    try {
+                        photoUri = data.getData();
+                    } catch (Exception e) {
+                        e.printStackTrace();
                     }
-                    break;
-                }
+                }
+                break;
+            }
 
-                case PICK_FROM_CAMERA: {
-                    if (resultCode == RESULT_OK) {
-                        File file = new File(mCurrentPhotoPath);
-                        Bitmap bitmap;
-                        if (Build.VERSION.SDK_INT >= 29) {
-                            ImageDecoder.Source source = ImageDecoder.createSource(getActivity().getApplicationContext().getContentResolver(), Uri.fromFile(file));
-                            try {
-                                bitmap = ImageDecoder.decodeBitmap(source);
-                                if (bitmap != null) { iv_photo.setImageBitmap(bitmap);
-                                }
-                            } catch (IOException e) { e.printStackTrace(); }
-                        }
-                        else {
-                            try {
-                                bitmap = MediaStore.Images.Media.getBitmap(getActivity().getApplicationContext().getContentResolver(), Uri.fromFile(file));
-                                if (bitmap != null) {
-                                    iv_photo.setImageBitmap(bitmap);
-                                }
-                            } catch (IOException e) {
-                                e.printStackTrace();
-                            }
-                        }
-                    } break;
-                }
-            }
-        } catch (Exception error) {
-            error.printStackTrace();
-        }
-    }
-
-    // 사진 촬영 후 썸네일만 띄워줌. 이미지를 파일로 저장해야 함
-    private File createImageFile() throws IOException {
-        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
-        String imageFileName = "JPEG_" + timeStamp + "_";
-        File storageDir = getActivity().getApplicationContext().getExternalFilesDir(Environment.DIRECTORY_PICTURES);
-        File image = File.createTempFile( imageFileName, ".jpg", storageDir );
-        mCurrentPhotoPath = image.getAbsolutePath(); return image;
-    }
-
-    // 카메라 인텐트 실행하는 부분
-    private void dispatchTakePictureIntent() {
-        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
-        if(takePictureIntent.resolveActivity(getActivity().getApplicationContext().getPackageManager()) != null) {
-            File photoFile = null;
-            try { photoFile = createImageFile();
-            } catch (IOException ex) { }
-            if(photoFile != null) {
-                Uri photoURI = FileProvider.getUriForFile(getActivity().getApplicationContext(), "com.example.studyproject.fileprovider", photoFile);
-                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
-                startActivityForResult(takePictureIntent, PICK_FROM_CAMERA);
-            }
-        }
-    }
-
-    private void storeCropImage(Bitmap bitmap, String filePath) {
-        // SmartWheel 폴더를 생성하여 이미지를 저장하는 방식이다.
-        String dirPath = Environment.getExternalStorageDirectory().getAbsolutePath() + "/SmartWheel";
-        File directory_SmartWheel = new File(dirPath);
-        if (!directory_SmartWheel.exists()) // SmartWheel 디렉터리에 폴더가 없다면 (새로 이미지를 저장할 경우에 속한다.)
-            directory_SmartWheel.mkdir();
-        File copyFile = new File(filePath);
-        BufferedOutputStream out = null;
-        try {
-            copyFile.createNewFile();
-            out = new BufferedOutputStream(new FileOutputStream(copyFile));
-            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);
-            // sendBroadcast를 통해 Crop된 사진을 앨범에 보이도록 갱신한다.
-            if (getActivity() != null) {
-                getActivity().sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(copyFile)));
-
-            }
-            out.flush();
-            out.close();
-        } catch (Exception e) {
-            e.printStackTrace();
+            case FROM_CAMERA: {
+                //카메라 촬영
+                try {
+                    addPhotoToGallery();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+                break;
+            }
         }
     }
+
+    public void uploadPhoto() {
+        AlertDialog.Builder alt_bld = new AlertDialog.Builder(getContext()); //R.style.추가
+        alt_bld.setTitle("사진 선택 완료").setMessage("사진을 등록하시겠습니까?").setCancelable(
+                false).setPositiveButton("네",
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int id) {
+                        //DB에 등록하기
+                        storage = FirebaseStorage.getInstance("gs://fir-test-1-35648.appspot.com");
+//                        final String cu = mAuth.getUid();
+                        //1. 사진을 storage에 저장하고 그 url을 알아내야 함
+                        String filename = "" + System.currentTimeMillis(); //cu + "_" +
+                        StorageReference storageRef = storage.getReference();
+                        StorageReference galleryRdf = storageRef.child("gallery/" +filename);
+                        UploadTask uploadTask;
+                        Uri file = null;
+                        if(flag ==0){
+                            //사진촬영
+                            file = Uri.fromFile(new File(mCurrentPhotoPath));
+                        } else if(flag==1){
+                            //앨범선택
+                            file = photoUri;
+                        }
+                        uploadTask = galleryRdf.putFile(file);
+                        final ProgressDialog progressDialog = new ProgressDialog(getContext());
+                        progressDialog.setMessage("업로드중");
+                        progressDialog.show();
+
+                        // Register observers to listen for when the download is done or if it fails
+                        uploadTask.addOnFailureListener(new OnFailureListener() {
+                            @Override
+                            public void onFailure(@NonNull Exception exception) {
+                                // Handle unsuccessful uploads
+                                Log.v("알림", "사진 업로드 실패");
+                                progressDialog.dismiss();
+                                exception.printStackTrace();
+
+                            }
+                        }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
+                            @Override
+                            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
+                                // taskSnapshot.getMetadata() contains file metadata such as size, content-type, and download URL.
+                                downloadUrl = taskSnapshot.getMetadata().getReference().getDownloadUrl().toString();
+                                Log.v("알림", "사진 업로드 성공 " + downloadUrl);
+                                progressDialog.dismiss();
+                                Toast.makeText(getActivity(), "사진이 업로드 되었습니다.", Toast.LENGTH_SHORT).show();
 
-}
+                            }
+                        });
+                    }
+                }).setNegativeButton("아니오",
+                new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int id) {
+                        // 아니오 클릭. dialog 닫기.
+                        dialog.cancel();
+                    }
+                });
+        AlertDialog alert = alt_bld.create();
+        alert.show();
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/studyproject/TimerFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.studyproject;\r\n\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Message;\r\nimport android.os.SystemClock;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.ImageButton;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.fragment.app.Fragment;\r\n\r\npublic class TimerFragment extends Fragment implements View.OnClickListener {\r\n    TextView tv_time;\r\n    ImageButton ibt_start;\r\n    Button bt_quit;\r\n    WeeklyFragmentTmp fragment_weekly;\r\n\r\n    final static int Init = 0;\r\n    final static int Run = 1;\r\n    final static int Pause = 2;\r\n    int cur_Status = Init; //현재의 상태를 저장할변수를 초기화함.\r\n    long myBaseTime;\r\n    long myPauseTime;\r\n\r\n    public static TimerFragment newInstance() {\r\n        return new TimerFragment();\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\r\n        View view = inflater.inflate(R.layout.fragment_timer, container, false);\r\n\r\n        tv_time = (TextView)view.findViewById(R.id.textViewTime);\r\n\r\n        ibt_start = (ImageButton) view.findViewById(R.id.imageButtonStart);\r\n        ibt_start.setOnClickListener(this);\r\n\r\n        fragment_weekly = new WeeklyFragmentTmp();\r\n        bt_quit =  (Button)view.findViewById(R.id.buttonQuit);\r\n        bt_quit.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                getActivity().getSupportFragmentManager().beginTransaction().replace(R.id.containerTabs, fragment_weekly).commit();\r\n            }\r\n        });\r\n\r\n        return view;\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (cur_Status) {\r\n            case Init:\r\n                myBaseTime = SystemClock.elapsedRealtime();\r\n                System.out.println(myBaseTime);\r\n                //myTimer이라는 핸들러를 빈 메세지를 보내서 호출\r\n                myTimer.sendEmptyMessage(0);\r\n//                      ibt_start 이미지 변경 '멈춤'\r\n                cur_Status = Run; //현재상태를 런상태로 변경\r\n                break;\r\n            case Run:\r\n                myTimer.removeMessages(0); //핸들러 메세지 제거\r\n                myPauseTime = SystemClock.elapsedRealtime();\r\n//                      이미지 변경\r\n                cur_Status = Pause;\r\n                break;\r\n            case Pause:\r\n                long now = SystemClock.elapsedRealtime();\r\n                myTimer.sendEmptyMessage(0);\r\n                myBaseTime += (now- myPauseTime);\r\n//                      이미지 변경\r\n                cur_Status = Run;\r\n                break;\r\n        }\r\n    }\r\n\r\n    Handler myTimer = new Handler() {\r\n        public void handleMessage(Message msg){\r\n            tv_time.setText(getTimeOut());\r\n\r\n            //sendEmptyMessage 는 비어있는 메세지를 Handler 에게 전송하는겁니다.\r\n            myTimer.sendEmptyMessage(0);\r\n        }\r\n    };\r\n\r\n    //현재시간을 계속 구해서 출력하는 메소드\r\n    String getTimeOut(){\r\n        long now = SystemClock.elapsedRealtime(); //애플리케이션이 실행되고나서 실제로 경과된 시간\r\n        long outTime = now - myBaseTime;\r\n        String easy_outTime = String.format(\"%02d:%02d:%02d\", outTime/ 1000/ 3600, outTime/1000 / 60 %60, (outTime/1000)%60);\r\n        return easy_outTime;\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/studyproject/TimerFragment.java	(revision d452ed524f3bdcd7cfbbe0b0eeaac7ca9137cbef)
+++ app/src/main/java/com/example/studyproject/TimerFragment.java	(date 1621589708401)
@@ -17,7 +17,7 @@
     TextView tv_time;
     ImageButton ibt_start;
     Button bt_quit;
-    WeeklyFragmentTmp fragment_weekly;
+    WeeklyFragment fragment_weekly;
 
     final static int Init = 0;
     final static int Run = 1;
@@ -39,7 +39,7 @@
         ibt_start = (ImageButton) view.findViewById(R.id.imageButtonStart);
         ibt_start.setOnClickListener(this);
 
-        fragment_weekly = new WeeklyFragmentTmp();
+        fragment_weekly = new WeeklyFragment();
         bt_quit =  (Button)view.findViewById(R.id.buttonQuit);
         bt_quit.setOnClickListener(new View.OnClickListener() {
             @Override
